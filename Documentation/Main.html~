<title>Tidy Tree Drawings</title>
<head><h1>Tidy Tree Visualizations of Music</h1></head>

<body>
<b>Objective:</b>
<p>
Our assignment involved the implementation of the paper <b>"Tidy Tree Drawings"</b> by Wetherell and Shannon.
The task comprised of implementing a naive tree drawer and Knuth's algorithm which satisfy a few basic aesthetics of tree drawing.
We were also required to implement the proposed algorithm which used ideas from both algorithms, as well as the concept of a <b>modifier</b> to draw trees which look aesthetically pleasing and occupy minimum paper/screen width.
</p>

<b>Why does our assignment stand out?</b>
<p>
Firstly, our assignment involves a <b>visualization of the output of trees.</b>
Why not a <b>visualization of the input?</b>
<br></br>
We provide a cool-looking piano interface with 24 keys. A smart algorithm translates your key presses
to addition of nodes on the tree. In case it wasn't obvious, yes it produces sounds as well!
</p>

<p>
Secondly, we improved upon the algorithms provided by implementing <b>dynamic scaling</b> which allows for a large number of nodes to be drawn within the confines of the screen. This is achieved through a modification to the spacing parameters depending on the width and height of the tree.
</p>

<b>Details of implementation</b>
<ol>
<li> <b>Piano interface</b> : Simple drawing of white and black rectangles which respond to computer keypresses and produce a sound. Done in OpenGL. </li>
<li> <b>Musical tones</b> : Python script to generate sine waves through the speaker, using the Tkinter and Snacker modules.</li>
<li> <b>Inter process communication</b> : Resource sharing and lock concept on a shared file notes.txt.</li>
<li> <b>Line and circles</b> : Midpoint circle algorithm and Bresenham's algorithm for line drawing. We implemented a general version of the algorithm to handle various cases of slopes and point orderings.</li>
<li> <b>Periphery Drawing</b> : Vector arithmetic is beautiful :) We find the intersection of the line joining centres with the circles and draw a line between them.</li>
<li> <b>General data structure</b> : The tree data structure is extended to meet the needs of all the algorithms. </li>
<li> <b>Modular implementation</b> : All algorithms simply run their own implementation of assignCoordinates() which is passed to the tree drawing routines. All algorithms read and build the tree using the same routines defined in the header treedraw.h. </li>
</ol>

<b>Links to Algorithm pages</b>
<ol>
<li><a href="Algo1.html">Algorithm 1 - Naive Tree Drawer</a></li>
<li></li>
<li></li>
</ol>

<b>Features of Interest</b>
<p>Our program allows for large height and width trees to fit in the screen.</p>
<br></br>
<img src="Algo1.png" width="600" align="left"></img>
<img src="Algo3.png" width="600" align="right"></img>
</body>
